import { useRouter } from "next/router";
import React, { useEffect, useMemo } from "react";
import { useAppDispatch, useAppSelector } from "redux/hooks";
import { setMainToken } from "../redux/slices/appSlices/authSlice";
import { RootState } from "redux/reducer";
import { common } from "utils/common";
import { socketActions } from "redux/slices/appSlices/socketSlice";
import { doGetUserInfo } from "redux/asyncThunk/userAction";
import Header from "components/common/Header/Header";
import { Color } from "utils/styled-constants";
import styles from 'styles/css/AuthLayoutHOC.module.scss';
import { ConfigProvider } from "antd";
import OneSignalReact from "react-onesignal";
import { unwrapResult } from "@reduxjs/toolkit";
import MessageBoxDrawer from "components/Message/MessageBoxDrawer/MessageBoxDrawer";
import Loading from "components/common/Loading/Loading";
import LoginScreen from "components/Login/Login";
import Head from "next/head";
import { IRoomModel, IResRoomDetail } from '../services/types/room';

const withAuth = (WrappedComponent: any) => {
  return (props: any) => {
    const router = useRouter();
    const dispatch = useAppDispatch();

    const {
      user: { isLoadingGetUserInfo, userInfo },
      login: { isLoading },
      room: {
        chatRoomList
      },
      message: { messageByRoomList }
    } = useAppSelector((state: RootState) => state);

    const goToLogin = () => {
      dispatch(setMainToken(''));
      common.removeToken();
      common.removeRefreshToken();
      router.push(`/login`);
    }

    const isHaveUser = useMemo(() => {
      return !!userInfo && !!userInfo.id;
    }, [userInfo]);

    // const numberRoomUnRead = useMemo(() => {
    //   if (!!chatRoomList.data.length) {

    //     const number: IRoomModel[] = chatRoomList.data.filter((item) => { return item.messagesUnRead > 0 });
    //     if (number.length == 0) {
    //       return 0;
    //     }
    //     return number.length;
    //   } else {
    //     return 0
    //   }
    // }, [chatRoomList, messageByRoomList]);

    useEffect(() => {
      const mainToken = common.getToken();
      // const refreshToken = common.getRefreshToken();

      if (mainToken && !isLoading) {
        if (!isLoading) {
          dispatch(setMainToken(mainToken));
          dispatch(socketActions.connectionEstablished());

          if (isLoadingGetUserInfo && !isHaveUser) {
            dispatch(doGetUserInfo({}))
              .then(unwrapResult)
              .then((response) => {
                const { data } = response;
                OneSignalReact.isPushNotificationsEnabled(function (isEnabled) {
                  if (isEnabled) {
                    OneSignalReact.setExternalUserId(data.id);
                  }
                  else {
                    OneSignalReact.getExternalUserId().then(function (externalId) {
                      if (externalId) {
                        OneSignalReact.removeExternalUserId();
                      }
                      OneSignalReact.showSlidedownPrompt({ force: true });

                      OneSignalReact.on('notificationPermissionChange', function (permissionChange) {
                        const currentPermission = permissionChange.to;
                        if (currentPermission === 'granted') {
                          OneSignalReact.setExternalUserId(data.id);
                        }
                      });
                    });
                  }
                });
              })
              .catch(() => {
                goToLogin();
              });
          }
        }
      } else {
        goToLogin();
      }
    }, []);

    // useEffect(() => {
    //   if (numberRoomUnRead > 0) {
    //     document.title = `(${numberRoomUnRead}) Live Chat`;
    //   } else {
    //     document.title = `Live Chat`;
    //   }
    // }, [chatRoomList, messageByRoomList]);

    return (
      <React.Fragment>
        {!isHaveUser ? (
          <React.Fragment>
            <LoginScreen />
          </React.Fragment>
        ) : (
          <ConfigProvider
            theme={{
              token: {
                colorPrimary: Color.Primary,
              },
              components: {
                Anchor: {
                  colorLinkHover: Color.Primary,
                },
                Button: {
                  colorPrimary: Color.Primary,
                }
              }
            }}
          >
            <div className={`${styles['auth-layout']}`}>
              <Head>
                <title>Live Chat</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="initial-scale=1, width=device-width" />
                <link rel="icon" href="/favicon.ico" />
              </Head>
              <Header></Header>
              <WrappedComponent {...props} />
              <MessageBoxDrawer />
            </div>
          </ConfigProvider>
        )}
        {isLoadingGetUserInfo && <Loading />}
      </React.Fragment>
    );
  };
};

export default withAuth;